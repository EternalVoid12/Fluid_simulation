Both the velocity and the density are assumed to be
constant in each grid cell and we usually display their values at the cell center. In practice we
allocate two arrays for both the density and the velocity of size, size=(N+2)*(N+2):
static u[size], v[size], u_prev[size], v_p rev[size];
static dens[size], dens_prev[size]; 

#define IX(i,j) ((i)+(N+2)*(j))
Raylib func:
void DrawPixel(int posX, int posY, Color color);
DrawGrid(int slices, float spacing);

The first term is easy to implement. We assume that the sources for a given frame are
provided in an array s[].This array is filled in by some part of the game engine which detects
sources of density. In our prototype it is filled in from the userâ€™s mouse movement. The routine
that adds the source to the density is simply:
void add_source ( int N, float * x, float * s, float dt )
{
    int i, size=(N+2)*(N+2);
    for ( i=0 ; i<size ; i++ ) x[i] += dt*s[i];
}

void advect ( int N, int b, float * d, float * d0, float * u, float * v, float dt )
{
int i, j, i0, j0, i1, j1;
float x, y, s0, t0, s1, t1, dt0;
dt0 = dt*N;
for ( i=1 ; i<=N ; i++ ) {
for ( j=1 ; j<=N ; j++ ) {
x = i-dt0*u[IX(i,j)]; y = j-dt0*v[IX(i,j)];
if (x<0.5) x=0.5; if (x>N+0.5) x=N+ 0.5; i0=(int)x; i1=i0+1;
if (y<0.5) y=0.5; if (y>N+0.5) y=N+ 0.5; j0=(int)y; j1=j0+1;
s1 = x-i0; s0 = 1-s1; t1 = y-j0; t0 = 1-t1;
d[IX(i,j)] = s0*(t0*d0[IX(i0,j0)]+t1*d 0[IX(i0,j1)])+
 s1*(t0*d0[IX(i1,j0)]+t1*d0[IX(i1,j1)]);
}
}
set_bnd ( N, b, d );
}


This completes our description of the density solver. All of these steps can conveniently be
grouped together into a single routine. We assume here that the source densities are initially
contained in the x0 array.
void dens_step ( int N, float * x, float * x0, float * u, float * v, float diff,
float dt )
{
add_source ( N, x, x0, dt );
SWAP ( x0, x ); diffuse ( N, 0, x, x0, diff, dt );
SWAP ( x0, x ); advect ( N, 0, x, x0, u, v, dt );
}
where SWAP is a macro that swaps the two array pointers:
#define SWAP(x0,x) {float *tmp=x0;x0=x;x=tmp;}

Assuming that the force field is stored in the arrays u0 and v0,
we have the following code:
void vel_step ( int N, float * u, float * v, float * u0, float * v0,
float visc, float dt )
{
add_source ( N, u, u0, dt ); add_source ( N, v, v0, dt );
SWAP ( u0, u ); diffuse ( N, 1, u, u0, visc, dt );
SWAP ( v0, v ); diffuse ( N, 2, v, v0, visc, dt );
project ( N, u, v, u0, v0 );
SWAP ( u0, u ); SWAP ( v0, v );
advect ( N, 1, u, u0, u0, v0, dt ); advect ( N, 2, v, v0, u0, v0, dt );
project ( N, u, v, u0, v0 );
}

To conclude this section here is how our code is used in our prototype

while ( simulating )
{
get_from_UI ( dens_prev, u_prev, v_prev );
vel_step ( N, u, v, u_prev, v_prev, visc, dt );
dens_step ( N, dens, dens_prev, u, v, diff, dt );
draw_dens ( N, dens );
}

TODO: DO WITHOUT SOURCE